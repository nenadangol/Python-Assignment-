{"cells":[{"cell_type":"markdown","id":"d83568fc","metadata":{"id":"d83568fc"},"source":["![img](https://ytu-cvlab.github.io/mce-51069/images/copied_from_nb/images/function.jpeg)"]},{"cell_type":"markdown","id":"2cf8928f","metadata":{"id":"2cf8928f"},"source":["# What is the Syntac of user-defined function?"]},{"cell_type":"code","execution_count":9,"id":"82d22229","metadata":{"id":"82d22229","executionInfo":{"status":"ok","timestamp":1748871763725,"user_tz":-345,"elapsed":33,"user":{"displayName":"Nena Dangol","userId":"13273446062459468651"}}},"outputs":[],"source":["def hello():\n","  print(hello)"]},{"cell_type":"markdown","id":"eb5888ba","metadata":{"id":"eb5888ba"},"source":["# Task 1: Define a Function"]},{"cell_type":"code","execution_count":null,"id":"54e820c2","metadata":{"id":"54e820c2"},"outputs":[],"source":["# Define a function called `greet` that takes a single parameter `name`.\n","# The purpose of this function is to print a greeting message that says \"Hello, [name]!\".\n","# For example, calling greet(\"Alice\") should output \"Hello, Alice!\"."]},{"cell_type":"code","execution_count":10,"id":"f7a0d8a7","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f7a0d8a7","executionInfo":{"status":"ok","timestamp":1748871800038,"user_tz":-345,"elapsed":44,"user":{"displayName":"Nena Dangol","userId":"13273446062459468651"}},"outputId":"e918f093-2d97-45f3-dd14-672c2e942050"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Alice!\n"]}],"source":["# Write your code here\n","def greet(name):\n"," print(\"Hello, \" + name + \"!\")\n","\n","greet(\"Alice\")"]},{"cell_type":"markdown","id":"54df224a","metadata":{"id":"54df224a"},"source":["# Task 2: Call the Function"]},{"cell_type":"code","execution_count":null,"id":"0e596bc8","metadata":{"id":"0e596bc8"},"outputs":[],"source":["# After defining the function, call it with different names to see the output.\n","# You should call the function at least three times with different names"]},{"cell_type":"code","execution_count":11,"id":"359b3353","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"359b3353","executionInfo":{"status":"ok","timestamp":1748871830890,"user_tz":-345,"elapsed":49,"user":{"displayName":"Nena Dangol","userId":"13273446062459468651"}},"outputId":"bca59dd2-42ee-4ee4-8b3f-1b508f056713"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Alice!\n","Hello, marie!\n","Hello, joe!\n"]}],"source":["# Write your code here\n","\n","def greet(name):\n"," print(\"Hello, \" + name + \"!\")\n","\n","greet(\"Alice\")\n","greet(\"marie\")\n","greet(\"joe\")"]},{"cell_type":"markdown","id":"8ab13bad","metadata":{"id":"8ab13bad"},"source":["# Task 3: Experiment with Different Inputs"]},{"cell_type":"code","execution_count":20,"id":"adb4a01a","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"adb4a01a","executionInfo":{"status":"error","timestamp":1748872273529,"user_tz":-345,"elapsed":103,"user":{"displayName":"Nena Dangol","userId":"13273446062459468651"}},"outputId":"7bdf5b6a-fd2b-4ab7-b811-568b24ed70e5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Dave!\n","Hello, !\n","Hello, !@#!\n"]},{"output_type":"error","ename":"TypeError","evalue":"can only concatenate str (not \"int\") to str","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-b3852552271a>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m\"Hello, \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgreet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m123\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-20-b3852552271a>\u001b[0m in \u001b[0;36mgreet\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# - A non-string input (e.g., greet(123))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mgreet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m\"Hello, \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgreet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m123\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"]}],"source":["# Try calling the `greet` function with different types of inputs:\n","# and observe and note down what happens with each type of input.\n","\n","\n","# - A string with a different name (e.g., greet(\"Dave\"))\n","\n","greet(\"Dave\")\n","\n","# - An empty string (e.g., greet(\"\"))\n","greet(\"\")\n","\n","# - A string with special characters (e.g., greet(\"!@#\"))\n","greet(\"!@#\")\n","\n","# - A non-string input (e.g., greet(123))\n","greet(123)"]},{"cell_type":"markdown","id":"b9479b91","metadata":{"id":"b9479b91"},"source":["# Write down your observations on how the `greet` function behaves with different inputs.\n","\n","# and write in paragraph about what you undestood about function"]},{"cell_type":"code","source":["When the greet function is called with a regular string like \"Dave\", it prints the greeting as expected, displaying \"Hello, Dave!\".\n","Passing an empty string results in \"Hello, !\", which still prints but shows no name after the greeting.\n","When special characters like \"!@#\" are used, the function treats them as normal strings and prints \"Hello, !@#!\" without issues.\n","However, when a non-string input, such as an integer (123), is passed the function raises a TypeError because Python cannot concatenate a string\n","with an integer directly. To handle this, the input can be converted to a string inside the function, allowing it to accept any data type and print\n"," a meaningful greeting"],"metadata":{"id":"JTzG8jnf5Zy6"},"id":"JTzG8jnf5Zy6","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.10"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}